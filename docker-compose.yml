version: "3.9"

services:
  margate-basket-api:
    build:
      context: .
      dockerfile: DockerfileBasket
    container_name: margate-basket-api
    ports:
      - "5000:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MsSql=Server=mssql;Database=Basket;User=sa;Password=Password123;Encrypt=false;
      
  margate-catalog-api:
    build:
      context: .
      dockerfile: DockerfileCatalog
    container_name: margate-catalog-api
    ports:
      - "5001:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MsSql=Server=mssql;Database=Catalog;User=sa;Password=Password123;Encrypt=false;
      
      
  margate-campaign-api:
    build:
      context: .
      dockerfile: DockerfileCampaign
    container_name: margate-campaign-api
    ports:
      - "5002:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Mongo=mongodb://mongo:27017
      
  margate-identity-api:
    build:
      context: .
      dockerfile: DockerfileIdentity
    container_name: margate-identity-api
    ports:
      - "5003:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MsSql=Server=mssql;Database=Identity;User=sa;Password=Password123;Encrypt=false;
      
  margate-order-api:
    build:
      context: .
      dockerfile: DockerfileOrder
    container_name: margate-order-api
    ports:
      - "5004:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MsSql=Server=mssql;Database=Order;User=sa;Password=Password123;Encrypt=false;
      - MessageBus__Host=rabbitmq
      - MessageBus__UserName=admin
      - MessageBus__Password=admin
      - MessageBus__VirtualHost=/
      - RemoteCalls__Identity=margate-identity-api

      
  margate-payment-api:
    build:
      context: .
      dockerfile: DockerfilePayment
    container_name: margate-payment-api
    ports:
      - "5005:8080" 
    networks:
      - app-network
    depends_on:
      - mssql
      - mongo
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__MsSql=Server=mssql;Database=Payment;User=sa;Password=Password123;Encrypt=false;

  # MSSQL service
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Password123
    ports:
      - "1433:1433"
    networks:
      - app-network
    volumes:
      - mssql-data:/var/opt/mssql
    restart: always

  # MongoDB service
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    restart: always

  # Redis service
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  mssql-data:
    driver: local
  mongo-data:
    driver: local
